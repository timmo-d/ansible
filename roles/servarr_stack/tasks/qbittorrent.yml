# Install qBittorrent
- name: Install qBittorrent-nox
  apt:
    name: qbittorrent-nox
    state: present
    update_cache: true
    
- name: Create qbittorrent users and config directories
  ansible.builtin.user:
    name: "{{ item.name }}"
    groups: "{{ media_group }}"
    shell: /usr/sbin/nologin
    create_home: yes
  loop: "{{ qbittorrent_instances }}"

- name: Ensure config directories exist
  ansible.builtin.file:
    path: "{{ item.config_dir }}"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ media_group }}"
    mode: '0755'
  loop: "{{ qbittorrent_instances }}"

- name: Restore 'data'-configuration from config template
  template:
    src: "qbittorrent.conf.j2"
    dest: "{{ qbittorrent_instances[0].config_dir }}/qbittorrent.conf"
    owner: "{{ qbittorrent_instances[0].name }}"
    group: "{{ media_group }}"
    mode: '0644'

- name: Restore 'whisparr'-configuration from config template
  template:
    src: "qbittorrent-r.conf.j2"
    dest: "{{ qbittorrent_instances[1].config_dir }}/qbittorrent.conf"
    owner: "{{ qbittorrent_instances[1].name }}"
    group: "{{ media_group }}"
    mode: '0644'

- name: Restore other common configuration from config template
  template:
    src: "qbittorrent.categories.json.j2"
    dest: "{{ item.config_dir }}/categories.json"
    owner: "{{ item.name }}"
    group: "{{ media_group }}"
    mode: '0644'
  loop: "{{ qbittorrent_instances }}"

- name: Create systemd service for each qbittorrent-nox instance
  ansible.builtin.template:
    src: qbittorrent-nox@.service.j2
    dest: "/etc/systemd/system/qbittorrent-nox@{{ item.name }}.service"
    mode: '0644'
  loop: "{{ qbittorrent_instances }}"
  notify: Reload systemd

- name: Enable and start qbittorrent-nox instances
  ansible.builtin.systemd:
    name: "qbittorrent-nox@{{ item.name }}.service"
    enabled: true
    state: started
  loop: "{{ qbittorrent_instances }}"


