- name: Ensure required system packages are installed
  apt:
    name:
      - git
      #- build-essential
      #- python3-dev
      #- libyaml-dev
      #- libffi-dev
      #- libssl-dev
      - python3
      - python3-venv
      - python3-pip
      - rsync
    state: present
    update_cache: true
  become: true

- name: Create user for huntarr
  user:
    name: huntarr
    group: "{{ media_group }}"
    shell: /usr/sbin/nologin
    create_home: yes

#- name: Create temp directory
#  file:
#    path: "{{ huntarr_repo_tmp }}"
#    state: directory
#    owner: "{{ huntarr_user }}"
#    group: media
#    mode: '0755'

#- name: Clone Huntarr.io repository to /tmp
#  git:
#    repo: "{{ huntarr_repo }}"
#    dest: "{{ huntarr_repo_tmp }}"
#    version: "HEAD"
#    force: yes

- name: Clone Huntarr.io repository to user home
  ansible.builtin.git:
    repo: "{{ huntarr_repo }}"                  
    dest: /home/{{ ansible_user }}/huntarr

- name: Create install directory
  file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ huntarr_user }}"
    group: media
    mode: '0755'

#- name: Create data directory
#  file:
#    path: "{{ data_dir }}"
#    state: directory
#    owner: "{{ huntarr_user }}"
#    group: media
#    mode: '0755'




#- name: Set ownership of cloned Huntarr.io repo
#  ansible.builtin.file:
#    path: "{{ huntarr_repo_tmp }}"
#    owner: huntarr
#    group: media
#    recurse: true


- name: Move Huntarr.io contents to install directory
  command: >
    rsync -a /home/{{ ansible_user }}/huntarr/ {{ install_dir }}/


- name: Create Python virtual environment
  command: python3 -m venv {{ huntarr_venv_dir }}
  args:
    creates: "{{ huntarr_venv_dir }}/bin/activate"


- name: Upgrade pip, setuptools, wheel in virtualenv
  command: "{{ huntarr_venv_dir }}/bin/pip install --upgrade pip setuptools wheel"


- name: Install PyYAML 6.0.3 using binary wheel
  command: "{{ huntarr_venv_dir }}/bin/pip install pyyaml==6.0.3 --only-binary :all:"


- name: Remove PyYAML from requirements.txt
  replace:
    path: "{{ install_dir }}/requirements.txt"
    regexp: '^pyyaml==.*$'
    replace: ''


- name: Install remaining Python dependencies
  command: "{{ huntarr_venv_dir }}/bin/pip install -r {{ install_dir }}/requirements.txt"


- name: Set ownership of all files and folders under virtualenv to huntarr
  ansible.builtin.file:
    path: "{{ install_dir }}"
    state: directory
    recurse: true
    owner: "{{ huntarr_user }}"
    group: "{{ media_group }}"
    mode: '0755'

- name: Find all files under install_dir
  ansible.builtin.find:
    paths: "{{ install_dir }}"
    file_type: file
  register: huntarr_files

- name: Set file permissions to 644
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: '0644'
  loop: "{{ huntarr_files.files }}"

- name: Copy start script
  template:
    src: "start-huntarr.sh.j2"
    dest: "{{ install_dir }}/start-huntarr.sh"
    owner: "{{ huntarr_user }}"
    group: "{{ media_group }}"
    mode: '0755'

- name: Deploy Huntarr systemd service template
  template:
    src: huntarr.service.j2
    dest: "{{ huntarr_service_path }}"
    owner: "{{ huntarr_user }}"
    group: "{{ media_group }}"
    mode: '0644'
  notify: Reload systemd

############################################
# Restore config from backups
############################################
#- name: Ensure destination directory exists
#  ansible.builtin.file:
#    path: "{{ install_dir }}/"
#    state: directory
#    owner: "{{ huntarr_user }}"
#    group: "{{ media_group }}"
#    mode: '0755'

# Run rsync ON the remote host so src and dest are remote paths
#- name: Rsync Kodi userdata (idempotent, (*** takes ~5 min on first run ***))
#  ansible.posix.synchronize:
#    src: /mnt/data/servarr/kodi/userdata/            # note trailing slash = copy contents
#    dest: /home/kodi/.var/app/tv.kodi.Kodi/data/userdata/
#    archive: true                                    # -a : perms, times, recurse, etc.
#    delete: false                                    # set true if you want a perfect mirror
#    checksum: false                                  # default: size+mtime; set true for stricter checks
#  delegate_to: "{{ inventory_hostname }}"

# Ensure ownership recursively (in case rsync preserved different owners)
#- name: Ensure ownership of destination is kodi:kodi
#  ansible.builtin.file:
#    path: /home/kodi/.var/app/tv.kodi.Kodi/data/userdata
#    owner: "{{ huntarr_user }}"
#    group: "{{ media_group }}"
#    recurse: true

- name: Enable and start Huntarr service
  systemd:
    name: huntarr.service
    enabled: true
    state: started

- name: Remove temporary Huntarr.io repo
  file:
    path: "{{ huntarr_repo_tmp }}"
    state: absent
