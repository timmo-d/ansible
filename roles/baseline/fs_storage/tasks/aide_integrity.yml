# Ensure AIDE present
- name: Install AIDE
  become: yes
  ansible.builtin.package:
    name: aide
    state: present
  when: enable_aide | default(true)

# Ensure database directory
- name: Ensure /var/lib/aide exists
  become: yes
  ansible.builtin.file:
    path: /var/lib/aide
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: enable_aide | default(true)

# Normalize config: dedupe, set gzip_dbout, compute filenames
- name: Remove any existing database/database_out lines
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/aide/aide.conf
    regexp: '^\s*(database|database_out)\s*=.*$'
    state: absent
  when: enable_aide | default(true)

- name: Ensure gzip_dbout is set explicitly
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/aide/aide.conf
    regexp: '^\s*gzip_dbout\s*='
    line: "gzip_dbout={{ 'yes' if aide_gzip_db | default(false) else 'no' }}"
    create: yes
    state: present
  when: enable_aide | default(true)

- name: Compute AIDE database filenames based on compression
  ansible.builtin.set_fact:
    aide_db_file: "/var/lib/aide/aide.db{{ '.gz' if aide_gzip_db | default(false) else '' }}"
    aide_db_new_file: "/var/lib/aide/aide.db.new{{ '.gz' if aide_gzip_db | default(false) else '' }}"
  when: enable_aide | default(true)

- name: Ensure AIDE database path is set
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/aide/aide.conf
    line: "database=file:{{ aide_db_file }}"
    create: true
    state: present
  when: enable_aide | default(true)

- name: Ensure AIDE database_out path is set
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/aide/aide.conf
    line: "database_out=file:{{ aide_db_new_file }}"
    create: true
    state: present
  when: enable_aide | default(true)

# Protect audit tools, as you had
- name: Protect audit tools with AIDE rules
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/aide/aide.conf
    line: "{{ item }} p+i+n+u+g+s+b+acl+xattrs+sha512"
    state: present
  loop:
    - /usr/sbin/auditctl
    - /usr/sbin/auditd
    - /usr/sbin/augenrules
    - /usr/sbin/aureport
    - /usr/sbin/ausearch
    - /usr/sbin/autrace
  when: enable_aide | default(true)

# Find aide binary (don't hardcode /usr/sbin/aide)
- name: Find aide binary
  ansible.builtin.command: bash -lc 'command -v aide || true'
  register: aide_bin
  changed_when: false
  failed_when: false
  when: enable_aide | default(true)

- name: Assert aide binary is available
  ansible.builtin.assert:
    that: "(aide_bin.stdout | length) > 0"
    fail_msg: "Could not find 'aide' in PATH after installation."
  when: enable_aide | default(true)

# Initialize database directly, passing the config path explicitly
- name: Initialize AIDE (direct, with explicit config)
  become: yes
  ansible.builtin.command: "{{ aide_bin.stdout }} --init --config /etc/aide/aide.conf"
  args:
    creates: "{{ aide_db_file }}"
  register: aide_init_direct
  changed_when: aide_init_direct.rc == 0
  failed_when: aide_init_direct.rc != 0
  when: enable_aide | default(true)

# Promote the .new DB to the final DB (what aideinit normally does)
- name: Promote new AIDE DB into place
  become: yes
  ansible.builtin.command: "mv -f {{ aide_db_new_file }} {{ aide_db_file }}"
  args:
    removes: "{{ aide_db_new_file }}"
    creates: "{{ aide_db_file }}"
  register: aide_mv
  changed_when: aide_mv.rc == 0
  failed_when: aide_mv.rc != 0
  when:
    - enable_aide | default(true)
    - aide_init_direct is defined
    - aide_init_direct.rc == 0

# Reporting prefs and timer (unchanged)
- name: Ensure AIDE sends non-silent reports
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/default/aide
    create: true
    regexp: '(?i)^\s*SILENTREPORTS='
    line: 'SILENTREPORTS=no'
    state: present
  when: enable_aide | default(true)

- name: Enable daily AIDE check (systemd timer)
  become: yes
  ansible.builtin.systemd:
    name: dailyaidecheck.timer
    state: started
    enabled: true
    masked: false
    daemon_reload: true
  when: enable_aide | default(true)
