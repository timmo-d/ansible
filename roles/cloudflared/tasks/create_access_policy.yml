---
# roles/cloudflared/tasks/create_email_otp_policies.yml

- name: Fail if created_apps is missing
  fail:
    msg: "created_apps variable is not defined — run create_access_apps.yml first"
  when: created_apps is not defined

# 1. Extract unique domains from created_apps
- name: Extract unique domains from created_apps
  set_fact:
    unique_domains: "{{ created_apps
                        | map(attribute='email')
                        | map('regex_replace', '.*@', '')
                        | unique }}"

# 2. Build domain_status_map from manual list
- name: Initialise domain_status_map
  set_fact:
    domain_status_map: >-
      {{
        dict(unique_domains | map('community.general.dict_kv', 'verified'))
        | combine(
            dict(unique_domains | difference(verified_email_domains | default([]))
                 | map('community.general.dict_kv', 'unverified'))
          )
      }}

# 3. Get existing policies for each app
- name: Get existing policies for each app
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app_id }}/policies"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
    return_content: yes
  register: existing_policies
  loop: "{{ created_apps }}"
  loop_control:
    label: "{{ item.name }}"

# 4. Normalise policy lists
- name: Normalise policy lists
  set_fact:
    normalised_policies: "{{ existing_policies.results
                             | map(attribute='json.result')
                             | map('default', [])
                             | map('list')
                             | list }}"

# 5. Combine apps and policies
- name: Build apps_with_policies list
  set_fact:
    apps_with_policies: "{{ apps_with_policies | default([]) + [ {
        'name': item.0.name,
        'app_id': item.0.app_id,
        'email': item.0.email,
        'domain': (item.0.email | regex_replace('.*@', '')),
        'policies': item.1 | default([])
      } ] }}"
  loop: "{{ created_apps | zip(normalised_policies) | list }}"
  loop_control:
    label: "{{ item.0.name }}"

# 6. Delete existing 'Email OTP Policy' if present
- name: Delete existing 'Email OTP Policy' if present
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.0.app_id }}/policies/{{ item.1.id }}"
    method: DELETE
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
    status_code: 200,204
  loop: "{{ query('subelements', apps_with_policies, 'policies', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.name }}"
  when:
    - item.1 is mapping
    - "'name' in item.1"
    - item.1.name == "Email OTP Policy"

# 7. DEBUG: Show rule type and reason
- name: Show rule type and reason for each app
  debug:
    msg: >-
      App '{{ item.name }}':
      {{
        'Using exact email match — domain is verified ✅'
        if domain_status_map[item.domain] == 'verified'
        else 'Using domain-wide match — domain not verified ❌ (fallback applied)'
      }}
  loop: "{{ apps_with_policies }}"
  loop_control:
    label: "{{ item.name }}"

# 8. DEBUG: Show JSON body for each new policy
- name: Show JSON body for Email OTP policy
  debug:
    msg: "{{ {
      'name': 'Email OTP Policy',
      'decision': 'allow',
      'include': (
        [ { 'email': { 'email': [ item.email ] } } ]
        if domain_status_map[item.domain] == 'verified'
        else [ { 'email_domain': { 'domain': [ item.domain ] } } ]
      ),
      'require': [ { 'login_method': 'onetimepin' } ],
      'precedence': 1
    } | to_nice_json }}"
  loop: "{{ apps_with_policies }}"
  loop_control:
    label: "{{ item.name }}"

# 9. Create new Email OTP policy for each app (with fallback)
- name: Create Email OTP policy for each app (with fallback)
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app_id }}/policies"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body: >-
      {{
        {
          'name': 'Email OTP Policy',
          'decision': 'allow',
          'include': (
            [ { 'email': { 'email': [ item.email ] } } ]
            if domain_status_map[item.domain] == 'verified'
            else [ { 'email_domain': { 'domain': [ item.domain ] } } ]
          ),
          'require': [ { 'login_method': 'onetimepin' } ],
          'precedence': 1
        }
      }}
    status_code: [200, 201]
  loop: "{{ apps_with_policies }}"
  loop_control:
    label: "{{ item.name }}"
