- name: Get Zone ID for base domain
  uri:
    url: "https://api.cloudflare.com/client/v4/zones?name={{ cloudflare_zone }}"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: zone_lookup

- name: Fail if zone lookup failed
  fail:
    msg: "Failed to retrieve zone ID for {{ cloudflare_zone }}: {{ zone_lookup.json.errors }}"
  when: not zone_lookup.json.success | default(false)

- name: Set zone_id fact
  set_fact:
    cloudflare_zone_id: "{{ zone_lookup.json.result[0].id }}"

- name: Log existing apps
  debug:
    var: existing_access_apps
  when: existing_access_apps is defined

- name: Normalize Access app hostnames
  set_fact:
    normalized_access_apps: >-
      {{
        access_apps_list
        | map('combine', {
            'public_hostname': (
              item.domain
              if (item.domain is defined and item.domain is match('^[^.]+\\..+\\..+$'))
              else (item.self_hosted_domains[0]
                    if (item.self_hosted_domains is defined and item.self_hosted_domains|length > 0)
                    else omit)
            )
          })
        | list
      }}
  loop: "{{ access_apps_list }}"
  loop_control:
    loop_var: item

- name: Ensure proxied CNAME record exists for each Access app
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      type: "CNAME"
      name: "{{ app.public_hostname }}"
      content: "{{ tunnel_id_final }}.cfargotunnel.com"
      proxied: true
      ttl: 1
    status_code: 200
    return_content: yes
  loop: "{{ normalized_access_apps }}"
  loop_control:
    loop_var: app
  when: app.public_hostname is defined and app.public_hostname | length > 0
  register: dns_create_results

- name: Show DNS creation results
  debug:
    var: dns_create_results.results
