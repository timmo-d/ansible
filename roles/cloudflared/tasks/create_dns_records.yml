---
# Create or update proxied CNAME DNS records for each Access app
# Always uses the correct tunnel UUID from tunnel_id_final
# and the first entry in self_hosted_domains[] as the public hostname.

- name: Get Zone ID for base domain
  uri:
    url: "https://api.cloudflare.com/client/v4/zones?name={{ cloudflare_zone }}"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: zone_lookup

- name: Fail if zone lookup failed
  fail:
    msg: "Failed to retrieve zone ID for {{ cloudflare_zone }}: {{ zone_lookup.json.errors }}"
  when: not zone_lookup.json.success | default(false)

- name: Set zone_id fact
  set_fact:
    cloudflare_zone_id: "{{ zone_lookup.json.result[0].id }}"

# Step 1: Filter only apps that have self_hosted_domains
- name: Filter apps with self_hosted_domains
  set_fact:
    apps_with_domains: "{{ access_apps_list
                           | selectattr('self_hosted_domains', 'defined')
                           | selectattr('self_hosted_domains', 'length', '>', 0)
                           | list }}"


# Step 2: Extract the first hostname from self_hosted_domains into app_hostnames list
- name: Extract first hostname for each app
  set_fact:
    app_hostnames: "{{ app_hostnames | default([]) + [ {'public_hostname': item.self_hosted_domains[0]} ] }}"
  loop: "{{ apps_with_domains }}"
  loop_control:
    loop_var: item

# Step 3: Debug to confirm the list
- name: Show hostnames to be created
  debug:
    var: app_hostnames

# Step 4: Create or update DNS records
- name: Ensure proxied CNAME record exists for each Access app
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      type: "CNAME"
      name: "{{ item.public_hostname }}"
      content: "{{ tunnel_id_final }}.cfargotunnel.com"
      proxied: true
      ttl: 1
    status_code: 200
    return_content: yes
  loop: "{{ app_hostnames }}"
  loop_control:
    label: "{{ item.public_hostname }}"
  register: dns_create_results

- name: Show DNS creation results
  debug:
    var: dns_create_results.results
