- name: Get Zone ID for base domain
  uri:
    url: "https://api.cloudflare.com/client/v4/zones?name={{ cloudflare_zone }}"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: zone_lookup

- name: Fail if zone lookup failed
  fail:
    msg: "Failed to retrieve zone ID for {{ cloudflare_zone }}: {{ zone_lookup.json.errors }}"
  when: not zone_lookup.json.success | default(false)

- name: Set zone_id fact
  set_fact:
    cloudflare_zone_id: "{{ zone_lookup.json.result[0].id }}"

# ðŸ”¹ Build a list of dicts with just the hostname we want
- name: Build list of public hostnames for DNS
  set_fact:
    app_hostnames: >-
      {{
        access_apps_list
        | selectattr('self_hosted_domains', 'defined')
        | selectattr('self_hosted_domains', 'length', '>', 0)
        | map('extract', attribute='self_hosted_domains', 0)
        | map('community.general.dict_kv', 'public_hostname')
        | list
      }}

- name: Debug hostnames to be created
  debug:
    var: app_hostnames

- name: Ensure proxied CNAME record exists for each Access app
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      type: "CNAME"
      name: "{{ item.public_hostname }}"
      content: "{{ tunnel_id_final }}.cfargotunnel.com"
      proxied: true
      ttl: 1
    status_code: 200
    return_content: yes
  loop: "{{ app_hostnames }}"
  loop_control:
    label: "{{ item.public_hostname }}"
  register: dns_create_results

- name: Show DNS creation results
  debug:
    var: dns_create_results.results
