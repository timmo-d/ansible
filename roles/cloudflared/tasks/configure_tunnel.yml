---
# cloudflared_tunnel.yml
# Fully automated Cloudflare Tunnel provisioning in headless token mode
# Outputs tunnel hostname and credentials as facts

# -------------------------
# 0. Ensure config directory
# -------------------------
- name: Ensure cloudflared config directory exists
  file:
    path: /etc/cloudflared
    state: directory
    owner: root
    group: root
    mode: '0755'

# -------------------------
# 1. Check if tunnel exists
# -------------------------
- name: Check if tunnel exists by name
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel?name={{ tunnel_name }}"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: tunnel_check

# -------------------------
# 2. Create tunnel if missing
# -------------------------
- name: Create tunnel if not found
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ tunnel_name }}"
    return_content: yes
    status_code: 200
  register: tunnel_create
  when: (tunnel_check.json.result | default([])) | length == 0

# -------------------------
# 3. Set tunnel_id_final
# -------------------------
- name: Set tunnel_id_final fact
  set_fact:
    tunnel_id_final: >-
      {{
        (tunnel_check.json.result[0].id)
        if (tunnel_check.json.result | default([])) | length > 0
        else (tunnel_create.json.result.id)
      }}

- name: Fail if tunnel_id_final is empty
  fail:
    msg: "No tunnel ID available â€” cannot proceed."
  when: tunnel_id_final | default('') | length == 0

# -------------------------
# 4. Fetch tunnel token JSON
# -------------------------
- name: Fetch tunnel token JSON
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel/{{ tunnel_id_final }}/token"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: tunnel_creds

- name: Fail if API did not return success
  fail:
    msg: "Failed to fetch tunnel token: {{ tunnel_creds.json.errors | to_nice_json }}"
  when: not tunnel_creds.json.success | default(false)

# -------------------------
# 5. Write credentials file
# -------------------------
- name: Write tunnel credentials file
  copy:
    content: "{{ tunnel_creds.content }}"
    dest: "/etc/cloudflared/{{ tunnel_id_final }}.json"
    owner: root
    group: root
    mode: '0600'

# -------------------------
# 6. Render config.yml
# -------------------------
- name: Write config.yml for cloudflared
  template:
    src: config.yml.j2
    dest: /etc/cloudflared/config.yml
    owner: root
    group: root
    mode: '0644'

# -------------------------
# 7. Validate credentials structure
# -------------------------
- name: Read credentials JSON
  slurp:
    path: "/etc/cloudflared/{{ tunnel_id_final }}.json"
  register: creds_file_raw

- set_fact:
    creds_json: "{{ creds_file_raw.content | b64decode | from_json }}"

- fail:
    msg: >-
      Invalid credentials file: expected keys AccountTag, TunnelID, TunnelName, TunnelSecret.
      Found keys: {{ creds_json.keys() | join(', ') }}
  when: not (
          'AccountTag' in creds_json and
          'TunnelID' in creds_json and
          'TunnelName' in creds_json and
          'TunnelSecret' in creds_json
        )

# -------------------------
# 8. Output tunnel facts for later roles
# -------------------------
- name: Set tunnel facts for downstream tasks
  set_fact:
    cf_tunnel_id: "{{ creds_json.TunnelID }}"
    cf_tunnel_name: "{{ creds_json.TunnelName }}"
    cf_tunnel_secret: "{{ creds_json.TunnelSecret }}"
    cf_tunnel_account_tag: "{{ creds_json.AccountTag }}"
    cf_tunnel_hostname: "{{ creds_json.TunnelName }}.cfargotunnel.com"

- name: Debug tunnel facts
  debug:
    msg:
      - "Tunnel ID: {{ cf_tunnel_id }}"
      - "Tunnel Name: {{ cf_tunnel_name }}"
      - "Tunnel Hostname: {{ cf_tunnel_hostname }}"
      - "Account Tag: {{ cf_tunnel_account_tag }}"

# -------------------------
# 9. Create systemd service
# -------------------------
- name: Create systemd service for cloudflared tunnel
  copy:
    dest: /etc/systemd/system/cloudflared.service
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=Cloudflare Tunnel
      After=network-online.target
      Wants=network-online.target

      [Service]
      Type=notify
      ExecStart={{ cloudflared_bin_path | default('/usr/local/bin/cloudflared') }} tunnel --config /etc/cloudflared/config.yml run {{ tunnel_id_final }}
      Restart=on-failure
      RestartSec=5s
      TimeoutStartSec=0
      LimitNOFILE=65536

      [Install]
      WantedBy=multi-user.target

# -------------------------
# 10. Reload and start service
# -------------------------
- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Enable and start cloudflared service
  systemd:
    name: cloudflared
    enabled: yes
    state: started
