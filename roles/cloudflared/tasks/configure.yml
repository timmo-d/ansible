- name: Get tunnel ID from Terraform
  command: terraform output -raw tunnel_id
  args:
    chdir: /path/to/terraform/module
  register: tunnel_id_result

- name: Get tunnel credentials JSON from Terraform
  command: terraform output -raw tunnel_credentials_json
  args:
    chdir: /path/to/terraform/module
  register: tunnel_creds_result

- name: Ensure /etc/cloudflared exists
  file:
    path: /etc/cloudflared
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Write tunnel credentials file
  copy:
    content: "{{ tunnel_creds_result.stdout }}"
    dest: "/etc/cloudflared/{{ tunnel_id_result.stdout }}.json"
    owner: root
    group: root
    mode: '0600'

- name: Write config.yml for cloudflared
  copy:
    dest: /etc/cloudflared/config.yml
    owner: root
    group: root
    mode: '0644'
    content: |
      tunnel: {{ tunnel_id_result.stdout }}
      credentials-file: /etc/cloudflared/{{ tunnel_id_result.stdout }}.json
      ingress:
        - hostname: app.example.com
          service: http://localhost:8080
        - service: http_status:404

- name: Create systemd service for cloudflared tunnel
  copy:
    dest: /etc/systemd/system/cloudflared.service
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=Cloudflare Tunnel
      After=network.target

      [Service]
      TimeoutStartSec=0
      Type=notify
      ExecStart={{ cloudflared_bin_path | default('/usr/local/bin/cloudflared') }} tunnel --config /etc/cloudflared/config.yml run {{ tunnel_id_result.stdout }}
      Restart=on-failure
      RestartSec=5s
      LimitNOFILE=65536

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Enable and start cloudflared service
  systemd:
    name: cloudflared
    enabled: yes
    state: started
