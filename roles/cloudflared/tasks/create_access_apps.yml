# roles/cloudflared/tasks/create_access_apps.yml

# 0. Preconditions
- name: Fail if Cloudflare account ID or API token is missing
  fail:
    msg: "cloudflare_account_id or cloudflare_apps_api_token is not set â€” cannot manage Access apps"
  when:
    - cloudflare_account_id is not defined or cloudflare_account_id | length == 0
    - cloudflare_apps_api_token is not defined or cloudflare_apps_api_token | length == 0

# 1. Fetch all Access apps once
- name: Get list of Access apps
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: access_apps_resp

- name: Fail if API call to get Access apps failed
  fail:
    msg: "Failed to retrieve Access apps: {{ access_apps_resp.json.errors }}"
  when: not access_apps_resp.json.success | default(false)

- name: Set access_apps_list fact to just the result array
  set_fact:
    access_apps_list: "{{ access_apps_resp.json.result | default([]) }}"

# 2. Create or update each app
- name: Create or update Cloudflare Access apps
  uri:
    url: >-
      https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps{{ '/' + existing_app.id if (existing_app is mapping and 'id' in existing_app) else '' }}
    method: "{{ 'PUT' if (existing_app is mapping and 'id' in existing_app) else 'POST' }}"
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      domain: "{{ item.domain }}"
      type: "self_hosted"
      session_duration: "1h"
    status_code: [200, 201]
    return_content: yes
  loop: "{{ cloudflare_access_apps }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    existing_app: >-
      {{ access_apps_list
         | selectattr('domain', 'equalto', item.domain)
         | first
         | default({}, true) }}
  register: app_create_results

# 3. Build list of {name, app_id} for policy creation
- name: Extract app IDs from creation/update results
  set_fact:
    created_apps: "{{ created_apps | default([]) + [ {
        'name': item.item.name,
        'app_id': (item.json.result.id | default(item.json.result.uid))
      } ] }}"
  loop: "{{ app_create_results.results }}"
  loop_control:
    label: "{{ item.item.name }}"

# 4. Show created_apps for verification
- name: Show created_apps structure
  debug:
    var: created_apps

# 5. Get existing policies for each app
- name: Get existing policies for each app
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app_id }}/policies"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
    return_content: yes
  register: existing_policies
  loop: "{{ created_apps }}"
  loop_control:
    label: "{{ item.name }}"

# 6. Initialise empty lists
- set_fact:
    apps_to_update: []
    apps_to_create: []

# 7. Classify apps into update/create lists
- name: Classify apps needing update
  set_fact:
    apps_to_update: "{{ apps_to_update + [ {'app': item.0, 'policies': item.1} ] }}"
  when: >
    item.1 is iterable and
    (
      item.1
      | select('mapping')
      | selectattr('name', 'defined')
      | selectattr('name', 'equalto', 'Email Domain Allow Policy')
      | list
      | length
    ) > 0
  loop: "{{ created_apps | zip(existing_policies.results | map(attribute='json.result') | list) | list }}"
  loop_control:
    label: "{{ item.0.name }}"

- name: Classify apps needing create
  set_fact:
    apps_to_create: "{{ apps_to_create + [ {'app': item.0, 'policies': item.1} ] }}"
  when: >
    not (
      item.1 is iterable and
      (
        item.1
        | select('mapping')
        | selectattr('name', 'defined')
        | selectattr('name', 'equalto', 'Email Domain Allow Policy')
        | list
        | length
      ) > 0
    )
  loop: "{{ created_apps | zip(existing_policies.results | map(attribute='json.result') | list) | list }}"
  loop_control:
    label: "{{ item.0.name }}"

# 8. Update existing Email Domain Allow Policy
- name: Update Email Domain Allow Policy
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app.app_id }}/policies/{{ (item.policies | selectattr('name', 'equalto', 'Email Domain Allow Policy') | first).id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Email Domain Allow Policy"
      decision: "allow"
      include:
        - email_domain:
            domain: "timmos.com.au"
      precedence: "{{ (item.policies | selectattr('name', 'equalto', 'Email Domain Allow Policy') | first).precedence }}"
    status_code: [200, 201]
  loop: "{{ apps_to_update }}"
  loop_control:
    label: "{{ item.app.name }}"

# 9. Create Email Domain Allow Policy for missing apps
- name: Create Email Domain Allow Policy
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app.app_id }}/policies"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Email Domain Allow Policy"
      decision: "allow"
      include:
        - email_domain:
            domain: "timmos.com.au"
      precedence: >-
        {{
          ((item.policies | map(attribute='precedence') | list) | default([0]))
          | max
          + 1
        }}
    status_code: [200, 201]
  loop: "{{ apps_to_create }}"
  loop_control:
    label: "{{ item.app.name }}"
