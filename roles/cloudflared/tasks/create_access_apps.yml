# 0. Preconditions
- name: Fail if Cloudflare account ID or API token is missing
  fail:
    msg: "cloudflare_account_id or cloudflare_apps_api_token is not set â€” cannot manage Access apps"
  when:
    - cloudflare_account_id is not defined or cloudflare_account_id | length == 0
    - cloudflare_apps_api_token is not defined or cloudflare_apps_api_token | length == 0

# Fetch all Access apps and store them as a clean list in access_apps_list

- name: Get list of Access apps
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: access_apps_resp

- name: Fail if API call to get Access apps failed
  fail:
    msg: "Failed to retrieve Access apps: {{ access_apps_resp.json.errors }}"
  when: not access_apps_resp.json.success | default(false)

# âœ… This ensures access_apps_list is a LIST, not the whole uri result dict
- name: Set access_apps_list fact to just the result array
  set_fact:
    access_apps_list: "{{ access_apps_resp.json.result | default([]) }}"

- name: Debug discovered Access apps (YAML pretty print)
  debug:
    var: access_apps_list

- name: Fail if API call to get Access apps failed
  fail:
    msg: "Failed to retrieve Access apps: {{ access_apps_resp.json.errors }}"
  when: not access_apps_resp.json.success | default(false)

- name: Set access_apps_list fact to just the result array
  set_fact:
    access_apps_list: "{{ access_apps_resp.json.result | default([]) }}"

# ðŸ”¹ Debug: Prettyâ€‘print the list so you can see all fields
- name: Show discovered Access apps (YAML pretty print)
  debug:
    var: access_apps_list


# 2. Create missing Access apps
- name: Create Cloudflare Access apps if not already present
  uri:
    url: https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps{{ '/' + (app_lookup.results[loop.index0].json.result[0].id | default('')) if (app_lookup.results[loop.index0].json.result | length > 0) else '' }}
    method: "{{ 'PUT' if (app_lookup.results[loop.index0].json.result | length > 0) else 'POST' }}"
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      domain: "{{ item.domain }}"
      type: "self_hosted"
      session_duration: "1h"
    status_code: [200, 201]
    return_content: yes
  loop: "{{ cloudflare_access_apps }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - existing_access_apps.json.success | default(false)
    - item.domain not in (existing_access_apps.json.result | map(attribute='domain') | list | default([]))
  register: created_access_apps
#- name: Create Cloudflare Access apps if not already present
#  uri:
#    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps"
#    method: POST
#    headers:
#      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
#      Content-Type: "application/json"
#    body_format: json
#    body:
#      name: "{{ item.name }}"
#      domain: "{{ item.domain }}"
#      type: "self_hosted"
#      session_duration: "24h"
#      policies:
#        - decision: allow
#          include:
#            - email:
#                email: "{{ item.email }}"
#    status_code: [200, 201]
#  loop: "{{ cloudflare_access_apps }}"
#  loop_control:
#    label: "{{ item.name }}"
#  when:
#    - existing_access_apps.json.success | default(false)
#    - item.domain not in (existing_access_apps.json.result | map(attribute='domain') | list | default([]))
#  register: created_access_apps

# 3. Log newly created apps
- name: Log newly created apps
  debug:
    var: created_access_apps
  when: created_access_apps is defined

