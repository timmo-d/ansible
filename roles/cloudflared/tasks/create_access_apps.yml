# 0. Preconditions
- name: Fail if Cloudflare account ID or API token is missing
  fail:
    msg: "cloudflare_account_id or cloudflare_apps_api_token is not set â€” cannot manage Access apps"
  when:
    - cloudflare_account_id is not defined or cloudflare_account_id | length == 0
    - cloudflare_apps_api_token is not defined or cloudflare_apps_api_token | length == 0

# 1. Fetch all Access apps once
- name: Get list of Access apps
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    return_content: yes
    status_code: 200
  register: access_apps_resp

- name: Fail if API call to get Access apps failed
  fail:
    msg: "Failed to retrieve Access apps: {{ access_apps_resp.json.errors }}"
  when: not access_apps_resp.json.success | default(false)

- name: Set access_apps_list fact to just the result array
  set_fact:
    access_apps_list: "{{ access_apps_resp.json.result | default([]) }}"

# 2. Create or update each app (idempotent)
- name: Create or update Cloudflare Access apps
  uri:
    url: >-
      https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps{{ '/' + existing_app.id if existing_app is defined else '' }}
    method: "{{ 'PUT' if existing_app is defined else 'POST' }}"
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      domain: "{{ item.domain }}"
      type: "self_hosted"
      session_duration: "1h"
    status_code: [200, 201]
    return_content: yes
  loop: "{{ cloudflare_access_apps }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    existing_app: "{{ access_apps_list | selectattr('domain', 'equalto', item.domain) | first | default(omit) }}"
  register: app_create_results

# 3. Build list of {name, app_id, email} for policy creation
- name: Extract app IDs from creation/update results
  set_fact:
    created_apps: "{{ created_apps | default([]) + [ {
        'name': item.item.name,
        'app_id': (item.json.result.id | default(item.json.result.uid)),
        'email': item.item.email
      } ] }}"
  loop: "{{ app_create_results.results }}"
  loop_control:
    label: "{{ item.item.name }}"

# 4. Get existing policies for each app
- name: Get existing policies for each app
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app_id }}/policies"
    method: GET
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
    return_content: yes
  register: existing_policies
  loop: "{{ created_apps }}"
  loop_control:
    label: "{{ item.name }}"

# 4.1 Normalise policy lists
- name: Normalise policy lists
  set_fact:
    normalised_policies: "{{ existing_policies.results | map(attribute='json.result') | map('default', []) | map('list') | list }}"

# 4.2 Combine apps and policies for subelements
- name: Build apps_with_policies list
  set_fact:
    apps_with_policies: "{{ apps_with_policies | default([]) + [ {
        'name': item.0.name,
        'app_id': item.0.app_id,
        'policies': item.1 | default([])
      } ] }}"
  loop: "{{ created_apps | zip(normalised_policies) | list }}"
  loop_control:
    label: "{{ item.0.name }}"

# 5. Delete existing 'Email OTP Policy' if present
- name: Delete existing 'Email OTP Policy' if present
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.0.app_id }}/policies/{{ item.1.id }}"
    method: DELETE
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
    status_code: 200,204
  loop: "{{ query('subelements', apps_with_policies, 'policies', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.name }}"
  when:
    - item.1 is mapping
    - "'name' in item.1"
    - item.1.name == "Email OTP Policy"

# 6. Create new Email OTP policy for each app
- name: Create Email OTP policy for each app
  uri:
    url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/access/apps/{{ item.app_id }}/policies"
    method: POST
    headers:
      Authorization: "Bearer {{ cloudflare_apps_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Email OTP Policy"
      decision: allow
      include:
        - email:
            email:
              - "{{ item.email }}"
      require:
        - login_method: "onetimepin"
      precedence: 1
    status_code: [200, 201]
  loop: "{{ created_apps }}"
  loop_control:
    label: "{{ item.name }}"
